     1                                  ;----------------------------------------------------------------------------------------------------------------------------
     2                                  ;Program name: "Sum of Array".
     3                                  ;This program takes in float numbers from the user and returns the sum of those numbers.
     4                                  ;Copyright (C) 2021 Zachary Thompson.
     5                                  ;
     6                                  ;This file is part of the software program "Sum of Array".
     7                                  ;Sum of Array is free software: you can redistribute it and/or modify it under the terms of the GNU
     8                                  ;General Public License version 3 as published by the Free Software Foundation.
     9                                  ;Sum of Array is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
    10                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
    11                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.
    12                                  ;----------------------------------------------------------------------------------------------------------------------------
    13                                  ;Author information
    14                                  ;  Author name: Zachary Thompson
    15                                  ;  Author email: zachth1723@csu.fullerton.edu
    16                                  ;
    17                                  ;Program information
    18                                  ;  Program name: Sum of Array
    19                                  ;  Programming languages: One module in C Language, One module in C++, and Three modules in X86.
    20                                  ;  Correct Platform: GNU/Linux with Bash shell.
    21                                  ;  Date program began: 2021-Mar-06
    22                                  ;  Date of last update: 2021-Mar-21
    23                                  ;  Files in this program: control.asm, display.cpp, fill.asm, main.c, sum.asm
    24                                  ;  Status: Complete.
    25                                  ;
    26                                  ;Purpose
    27                                  ;  Compute the sum of the float numbers contained in an array.
    28                                  ;
    29                                  ;This file
    30                                  ;  File name: fill.asm
    31                                  ;  Language: X86 with Intel syntax
    32                                  ;  Assemble: nasm -f elf64 -l fill.lis -o fill.o fill.asm
    33                                  ;  Link: g++ -m64 -fno-pie -no-pie -o arraysum.out control.o display.o fill.o main.o sum.o
    34                                  ;----- Begin code area ------------------------------------------------------------------------------------------------------
    35                                  extern printf
    36                                  extern scanf
    37                                  global fill
    38                                  
    39                                  section .data
    40 00000000 506C6561736520656E-     input_prompt db "Please enter floating point numbers separated by ws.",10,"When finished press enter followed by cntl+D.",10,0
    40 00000009 74657220666C6F6174-
    40 00000012 696E6720706F696E74-
    40 0000001B 206E756D6265727320-
    40 00000024 736570617261746564-
    40 0000002D 2062792077732E0A57-
    40 00000036 68656E2066696E6973-
    40 0000003F 686564207072657373-
    40 00000048 20656E74657220666F-
    40 00000051 6C6C6F776564206279-
    40 0000005A 20636E746C2B442E0A-
    40 00000063 00                 
    41 00000064 256C6600                float_format db "%lf",0
    42                                  
    43                                  section .text
    44                                  
    45                                  fill: 
    46                                  
    47                                  ;Set up new stack frame
    48 00000000 55                      push rbp
    49 00000001 4889E5                  mov  rbp,rsp
    50                                  
    51                                  ;Prolog ----- Insurance for any caller of this assembly module -----
    52                                  ;Any future program calling this module that the data in the caller's GPRs will not be modified.
    53 00000004 57                      push rdi                                                    ;Backup rdi
    54 00000005 56                      push rsi                                                    ;Backup rsi
    55 00000006 52                      push rdx                                                    ;Backup rdx
    56 00000007 51                      push rcx                                                    ;Backup rcx
    57 00000008 4150                    push r8                                                     ;Backup r8
    58 0000000A 4151                    push r9                                                     ;Backup r9
    59 0000000C 4152                    push r10                                                    ;Backup r10
    60 0000000E 4153                    push r11                                                    ;Backup r11
    61 00000010 4154                    push r12                                                    ;Backup r12
    62 00000012 4155                    push r13                                                    ;Backup r13
    63 00000014 4156                    push r14                                                    ;Backup r14
    64 00000016 4157                    push r15                                                    ;Backup r15
    65 00000018 53                      push rbx                                                    ;Backup rbx
    66 00000019 9C                      pushf                                                       ;Backup rflags
    67                                  
    68 0000001A 4989FF                  mov r15, rdi ;r15 = pointer to array
    69 0000001D 41BE00000000            mov r14, 0 ;r14 = size/counter
    70 00000023 4989F5                  mov r13, rsi ;Maximum size of array
    71                                  
    72                                  ;Display prompt asking user for inputs
    73 00000026 6A00                    push qword 0
    74 00000028 B800000000              mov rax, 0
    75 0000002D 48BF-                   mov rdi, input_prompt
    75 0000002F [0000000000000000] 
    76 00000037 E8(00000000)            call printf
    77 0000003C 58                      pop rax
    78                                  
    79                                  ;----Beginning of Loop---------------------------------------------------------
    80                                  loop:
    81                                  
    82                                  ;Get one float number from user
    83 0000003D 6A00                    push qword 0 ;Align the stack
    84 0000003F 6A00                    push qword 0
    85 00000041 B801000000              mov rax, 1
    86 00000046 48BF-                   mov rdi, float_format
    86 00000048 [6400000000000000] 
    87 00000050 4889E6                  mov rsi, rsp
    88 00000053 E8(00000000)            call scanf
    89                                  
    90                                  ;Place the inputted qword from the top of the stack
    91                                  ;into xmm15
    92 00000058 F2440F103C24            movsd xmm15, [rsp]
    93 0000005E 415C                    pop r12 ;Reverse pushes before scanf
    94 00000060 415C                    pop r12 ;Put value into r12 so it doesnt interfere with other registers
    95                                  
    96                                  ;Check for CTRL-D. If rax == -1, then exit loop.
    97 00000062 4898                    cdqe ;Convert doubleword in eax register into quadword in rax register.
    98 00000064 4883F8FF                cmp rax, -1
    99 00000068 740E                    je conclude
   100                                  
   101                                  ;Put inputted value into array
   102 0000006A F2470F113CF7            movsd [r15 + 8*r14], xmm15
   103 00000070 49FFC6                  inc r14 ;increment size/counter
   104                                  
   105                                  ;Check if the maximum array size has been reached
   106                                  ;Exit the loop if it has
   107 00000073 4D39EE                  cmp r14, r13
   108 00000076 7CC5                    jl loop
   109                                  ;----End of Loop---------------------------------------------------------------
   110                                  
   111                                  conclude:
   112                                  
   113 00000078 4C89F0                  mov rax, r14 ;return size to caller
   114                                  
   115                                  ;----- Restore original values to integer registers -----
   116 0000007B 9D                      popf    ;Restore rflags
   117 0000007C 5B                      pop rbx ;Restore rbx
   118 0000007D 415F                    pop r15 ;Restore r15
   119 0000007F 415E                    pop r14 ;Restore r14
   120 00000081 415D                    pop r13 ;Restore r13
   121 00000083 415C                    pop r12 ;Restore r12
   122 00000085 415B                    pop r11 ;Restore r11
   123 00000087 415A                    pop r10 ;Restore r10
   124 00000089 4159                    pop r9  ;Restore r9
   125 0000008B 4158                    pop r8  ;Restore r8
   126 0000008D 59                      pop rcx ;Restore rcx
   127 0000008E 5A                      pop rdx ;Restore rdx
   128 0000008F 5E                      pop rsi ;Restore rsi
   129 00000090 5F                      pop rdi ;Restore rdi
   130 00000091 5D                      pop rbp ;Restore rbp
   131                                  
   132 00000092 C3                      ret ;Return to caller
