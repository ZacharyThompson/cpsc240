     1                                  ;----------------------------------------------------------------------------------------------------------------------------
     2                                  ;Program name: "Sum of Array".
     3                                  ;This program takes in float numbers from the user and returns the sum of those numbers.
     4                                  ;Copyright (C) 2021 Zachary Thompson.
     5                                  ;
     6                                  ;This file is part of the software program "Sum of Array".
     7                                  ;Sum of Array is free software: you can redistribute it and/or modify it under the terms of the GNU
     8                                  ;General Public License version 3 as published by the Free Software Foundation.
     9                                  ;Sum of Array is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
    10                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
    11                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.
    12                                  ;----------------------------------------------------------------------------------------------------------------------------
    13                                  ;Author information
    14                                  ;  Author name: Zachary Thompson
    15                                  ;  Author email: zachth1723@csu.fullerton.edu
    16                                  ;
    17                                  ;Program information
    18                                  ;  Program name: Sum of Array
    19                                  ;  Programming languages: One module in C Language, One module in C++, and Three modules in X86.
    20                                  ;  Correct Platform: GNU/Linux with Bash shell.
    21                                  ;  Date program began: 2021-Mar-06
    22                                  ;  Date of last update: 2021-Mar-21
    23                                  ;  Files in this program: control.asm, display.cpp, fill.asm, main.c, sum.asm
    24                                  ;  Status: Complete.
    25                                  ;
    26                                  ;Purpose
    27                                  ;  Compute the sum of the float numbers contained in an array.
    28                                  ;
    29                                  ;This file
    30                                  ;  File name: control.asm
    31                                  ;  Language: X86 with Intel syntax
    32                                  ;  Assemble: nasm -f elf64 -l sum.lis -o sum.o sum.asm
    33                                  ;  Link: g++ -m64 -fno-pie -no-pie -o arraysum.out control.o display.o fill.o main.o sum.o
    34                                  ;----- Begin code area ------------------------------------------------------------------------------------------------------
    35                                  global sum
    36                                  
    37                                  section .text
    38                                  
    39                                  sum:
    40                                  
    41                                  ;Set up new stack frame
    42 00000000 55                      push rbp
    43 00000001 4889E5                  mov  rbp,rsp
    44                                  
    45                                  ;Prolog ----- Insurance for any caller of this assembly module -----
    46                                  ;Any future program calling this module that the data in the caller's GPRs will not be modified.
    47 00000004 57                      push rdi                                                    ;Backup rdi
    48 00000005 56                      push rsi                                                    ;Backup rsi
    49 00000006 52                      push rdx                                                    ;Backup rdx
    50 00000007 51                      push rcx                                                    ;Backup rcx
    51 00000008 4150                    push r8                                                     ;Backup r8
    52 0000000A 4151                    push r9                                                     ;Backup r9
    53 0000000C 4152                    push r10                                                    ;Backup r10
    54 0000000E 4153                    push r11                                                    ;Backup r11
    55 00000010 4154                    push r12                                                    ;Backup r12
    56 00000012 4155                    push r13                                                    ;Backup r13
    57 00000014 4156                    push r14                                                    ;Backup r14
    58 00000016 4157                    push r15                                                    ;Backup r15
    59 00000018 53                      push rbx                                                    ;Backup rbx
    60 00000019 9C                      pushf                                                       ;Backup rflags
    61                                  
    62 0000001A 4989FF                  mov r15, rdi ;r15 = pointer to array
    63 0000001D 4989F6                  mov r14, rsi ;r14 = size/counter
    64                                  
    65                                  ;Set sum's value (xmm15) to 0 initially
    66 00000020 B800000000              mov rax, 0
    67 00000025 F24C0F2AF8              cvtsi2sd xmm15, rax 
    68                                  
    69                                  ;----Beginning of Loop----------------------------------------------------------
    70                                  loop:
    71 0000002A F2470F583CF7            addsd xmm15, [r15 + 8*r14]
    72                                  
    73 00000030 49FFCE                  dec r14 ;Decrease counter by 1
    74                                  
    75                                  ;If counter >= 0, then loop again.
    76 00000033 4983FE00                cmp r14, 0
    77 00000037 7DF1                    jge loop ;repeat loop
    78                                  ;----End of Loop----------------------------------------------------------------
    79                                  
    80 00000039 F2410F10C7              movsd xmm0, xmm15 ;return sum to caller
    81                                  
    82                                  ;----- Restore original values to integer registers -----
    83 0000003E 9D                      popf    ;Restore rflags
    84 0000003F 5B                      pop rbx ;Restore rbx
    85 00000040 415F                    pop r15 ;Restore r15
    86 00000042 415E                    pop r14 ;Restore r14
    87 00000044 415D                    pop r13 ;Restore r13
    88 00000046 415C                    pop r12 ;Restore r12
    89 00000048 415B                    pop r11 ;Restore r11
    90 0000004A 415A                    pop r10 ;Restore r10
    91 0000004C 4159                    pop r9  ;Restore r9
    92 0000004E 4158                    pop r8  ;Restore r8
    93 00000050 59                      pop rcx ;Restore rcx
    94 00000051 5A                      pop rdx ;Restore rdx
    95 00000052 5E                      pop rsi ;Restore rsi
    96 00000053 5F                      pop rdi ;Restore rdi
    97 00000054 5D                      pop rbp ;Restore rbp
    98                                  
    99 00000055 C3                      ret ;return to caller
